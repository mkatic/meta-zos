diff --git a/configure.in b/configure.in
index 416b63a..c0d5ba6 100644
--- a/configure.in
+++ b/configure.in
@@ -824,6 +824,17 @@ CheckFBCON()
     fi
 }
 
+CheckTSLIB()
+{
+    AC_ARG_ENABLE(diskaudio,
+[  --enable-tslib      support for tslib [default=no]],
+                  , enable_tslib=no)
+    if test x$enable_tslib = xyes; then
+        CFLAGS="$CFLAGS -DTSLIB"
+	SYSTEM_LIBS="$SYSTEM_LIBS -lts"
+    fi
+}
+
 dnl Find DirectFB
 CheckDirectFB()
 {
@@ -1906,6 +1917,7 @@ case "$target" in
         CheckPTHREAD
         CheckSIGACTION
         CheckAltivec
+ 	CheckTSLIB
         CheckLinuxVersion
         CheckRPATH
 
diff --git a/src/video/fbcon/Makefile.am b/src/video/fbcon/Makefile.am
index ec3f8dd..61b0717 100644
--- a/src/video/fbcon/Makefile.am
+++ b/src/video/fbcon/Makefile.am
@@ -21,6 +21,7 @@ FBCON_SRCS = 			\
 	SDL_fbriva.c		\
 	SDL_fbriva.h		\
 	SDL_fbvideo.c		\
+	rot270.s		\
 	3dfx_mmio.h		\
 	3dfx_regs.h		\
 	matrox_mmio.h		\
diff --git a/src/video/fbcon/Makefile.in b/src/video/fbcon/Makefile.in
index e6dc8a9..d39062f 100644
--- a/src/video/fbcon/Makefile.in
+++ b/src/video/fbcon/Makefile.in
@@ -49,7 +49,8 @@ CONFIG_CLEAN_FILES =
 LTLIBRARIES = $(noinst_LTLIBRARIES)
 libvideo_fbcon_la_LIBADD =
 am__objects_1 = SDL_fbelo.lo SDL_fbevents.lo SDL_fb3dfx.lo \
-	SDL_fbmatrox.lo SDL_fbmouse.lo SDL_fbriva.lo SDL_fbvideo.lo
+	SDL_fbmatrox.lo SDL_fbmouse.lo SDL_fbriva.lo SDL_fbvideo.lo \
+	rot270.lo
 am_libvideo_fbcon_la_OBJECTS = $(am__objects_1)
 libvideo_fbcon_la_OBJECTS = $(am_libvideo_fbcon_la_OBJECTS)
 DEFAULT_INCLUDES = -I. -I$(srcdir)
@@ -63,6 +64,9 @@ LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
 CCLD = $(CC)
 LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(AM_LDFLAGS) $(LDFLAGS) -o $@
+CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)
+LTCCASCOMPILE = $(LIBTOOL) --mode=compile $(CCAS) $(AM_CCASFLAGS) \
+	$(CCASFLAGS)
 SOURCES = $(libvideo_fbcon_la_SOURCES)
 DIST_SOURCES = $(libvideo_fbcon_la_SOURCES)
 ETAGS = etags
@@ -291,6 +295,7 @@ FBCON_SRCS = \
 	SDL_fbriva.c		\
 	SDL_fbriva.h		\
 	SDL_fbvideo.c		\
+	rot270.s		\
 	3dfx_mmio.h		\
 	3dfx_regs.h		\
 	matrox_mmio.h		\
@@ -301,7 +306,7 @@ FBCON_SRCS = \
 all: all-am
 
 .SUFFIXES:
-.SUFFIXES: .c .lo .o .obj
+.SUFFIXES: .c .lo .o .obj .s
 $(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
 	@for dep in $?; do \
 	  case '$(am__configure_deps)' in \
@@ -378,6 +383,15 @@ distclean-compile:
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<
 
+.s.o:
+	$(CCASCOMPILE) -c $<
+
+.s.obj:
+	$(CCASCOMPILE) -c `$(CYGPATH_W) '$<'`
+
+.s.lo:
+	$(LTCCASCOMPILE) -c -o $@ $<
+
 mostlyclean-libtool:
 	-rm -f *.lo
 
diff --git a/src/video/fbcon/SDL_fbvideo.c b/src/video/fbcon/SDL_fbvideo.c
index f237ff6..99a5b4f 100644
--- a/src/video/fbcon/SDL_fbvideo.c
+++ b/src/video/fbcon/SDL_fbvideo.c
@@ -51,7 +51,6 @@ static char rcsid =
 #include "SDL_fbmatrox.h"
 #include "SDL_fbriva.h"
 
-
 #if defined(i386) && defined(FB_TYPE_VGA_PLANES)
 #define VGA16_FBCON_SUPPORT
 #ifndef FB_AUX_VGA_PLANES_VGA4
@@ -76,9 +75,11 @@ static const SDL_Rect checkres[] = {
 	{  0, 0,  720,  576 },		/* PAL */
 	{  0, 0,  720,  480 },		/* NTSC */
 	{  0, 0,  640,  480 },		/* 16 bpp: 0x111, or 273 */
+	{  0, 0,  480,  640 },
 	{  0, 0,  640,  400 },		/*  8 bpp: 0x100, or 256 */
 	{  0, 0,  512,  384 },
 	{  0, 0,  320,  240 },
+	{  0, 0,  240,  320 },
 	{  0, 0,  320,  200 }
 };
 static const struct {
@@ -112,9 +113,11 @@ static const struct {
 	*/
 	{  320,  200, 79440,  16, 16, 20,  4,  48, 1, 0, 2 },	/* 70 Hz */
 	{  320,  240, 63492,  16, 16, 16,  4,  48, 2, 0, 2 },	/* 72 Hz */
+        {  240,  320, 63492,  16, 16, 16,  4,  48, 3, 0, 2 },   /* 72 Hz */
 	{  512,  384, 49603,  48, 16, 16,  1,  64, 3, 0, 0 },	/* 78 Hz */
 	{  640,  400, 31746,  96, 32, 41,  1,  64, 3, 2, 0 },	/* 85 Hz */
 	{  640,  480, 31746, 120, 16, 16,  1,  64, 3, 0, 0 },	/* 75 Hz */
+        {  480,  640, 31746, 120, 16, 16,  1,  64, 4, 0, 0 },   /* 75 Hz */
 	{  768,  576, 26101, 144, 16, 28,  6, 112, 4, 0, 0 },	/* 60 Hz */
 	{  800,  600, 20000,  64, 56, 23, 37, 120, 6, 3, 0 },	/* 72 Hz */
 	{  960,  720, 17686, 144, 24, 28,  8, 112, 4, 0, 0 },	/* 60 Hz */
@@ -152,12 +155,18 @@ static void FB_SavePalette(_THIS, struct fb_fix_screeninfo *finfo,
                                   struct fb_var_screeninfo *vinfo);
 static void FB_RestorePalette(_THIS);
 
+static unsigned short	*gfx_buffer;
+static unsigned int 	gfx_pitch;
+static int 		gfx_rotate = 0;
+
 /* FB driver bootstrap functions */
 
 static int FB_Available(void)
 {
 	int console;
 	const char *SDL_fbdev;
+	int handle;
+	int retval;
 
 	SDL_fbdev = getenv("SDL_FBDEV");
 	if ( SDL_fbdev == NULL ) {
@@ -167,6 +176,24 @@ static int FB_Available(void)
 	if ( console >= 0 ) {
 		close(console);
 	}
+
+#define  SCRCTL_GET_ROTATION 0x413c
+
+	gfx_rotate = 0;
+	
+	handle = open("/dev/apm_bios", O_RDWR|O_NONBLOCK);
+	
+	if (handle > 0) {
+    	    retval = ioctl(handle, SCRCTL_GET_ROTATION);
+    	    close (handle);
+
+	    if (retval == 0) {
+		gfx_rotate = 1;
+	    }
+	}
+
+#undef  SCRCTL_GET_ROTATION
+
 	return(console >= 0);
 }
 
@@ -200,6 +227,8 @@ static SDL_VideoDevice *FB_CreateDevice(int devindex)
 	mouse_fd = -1;
 	keyboard_fd = -1;
 
+	this->hidden->rotate = gfx_rotate;
+
 	/* Set the function pointers */
 	this->VideoInit = FB_VideoInit;
 	this->ListModes = FB_ListModes;
@@ -223,7 +252,6 @@ static SDL_VideoDevice *FB_CreateDevice(int devindex)
 	this->GetWMInfo = NULL;
 	this->InitOSKeymap = FB_InitOSKeymap;
 	this->PumpEvents = FB_PumpEvents;
-
 	this->free = FB_DeleteDevice;
 
 	return this;
@@ -241,18 +269,30 @@ static int FB_CheckMode(_THIS, struct fb_var_screeninfo *vinfo,
 
 	mode_okay = 0;
 	vinfo->bits_per_pixel = (index+1)*8;
-	vinfo->xres = *w;
-	vinfo->xres_virtual = *w;
-	vinfo->yres = *h;
-	vinfo->yres_virtual = *h;
+
+	if (gfx_rotate) {
+	    vinfo->xres = *h;
+	    vinfo->xres_virtual = *h;
+	    vinfo->yres = *w;
+	    vinfo->yres_virtual = *w;
+	} else {
+	    vinfo->xres = *w;
+	    vinfo->xres_virtual = *w;
+	    vinfo->yres = *h;
+	    vinfo->yres_virtual = *h;
+	}
+
 	vinfo->activate = FB_ACTIVATE_TEST;
 	if ( ioctl(console_fd, FBIOPUT_VSCREENINFO, vinfo) == 0 ) {
 #ifdef FBCON_DEBUG
 		fprintf(stderr, "Checked mode %dx%d at %d bpp, got mode %dx%d at %d bpp\n", *w, *h, (index+1)*8, vinfo->xres, vinfo->yres, vinfo->bits_per_pixel);
 #endif
 		if ( (((vinfo->bits_per_pixel+7)/8)-1) == index ) {
+		    if (gfx_rotate == 0) {
 			*w = vinfo->xres;
 			*h = vinfo->yres;
+		    }
+		    
 			mode_okay = 1;
 		}
 	}
@@ -739,6 +779,7 @@ static SDL_Surface *FB_SetVideoMode(_THIS, SDL_Surface *current,
 		SDL_SetError("Couldn't get console screen info");
 		return(NULL);
 	}
+
 #ifdef FBCON_DEBUG
 	fprintf(stderr, "Printing original vinfo:\n");
 	print_vinfo(&vinfo);
@@ -748,14 +789,27 @@ static SDL_Surface *FB_SetVideoMode(_THIS, SDL_Surface *current,
 		vinfo.activate = FB_ACTIVATE_NOW;
 		vinfo.accel_flags = 0;
 		vinfo.bits_per_pixel = bpp;
-		vinfo.xres = width;
-		vinfo.xres_virtual = width;
-		vinfo.yres = height;
-		if ( flags & SDL_DOUBLEBUF ) {
-			vinfo.yres_virtual = height*2;
+
+		if (gfx_rotate) {
+		    vinfo.xres = height;
+		    vinfo.xres_virtual = height;
+		    vinfo.yres = width;
+		    if ( flags & SDL_DOUBLEBUF ) {
+			vinfo.yres_virtual = width*2;
+		    } else {
+			vinfo.yres_virtual = width;
+		    }
 		} else {
+		    vinfo.xres = width;
+		    vinfo.xres_virtual = width;
+		    vinfo.yres = height;
+		    if ( flags & SDL_DOUBLEBUF ) {
+			vinfo.yres_virtual = height*2;
+		    } else {
 			vinfo.yres_virtual = height;
+		    }
 		}
+
 		vinfo.xoffset = 0;
 		vinfo.yoffset = 0;
 		vinfo.red.length = vinfo.red.offset = 0;
@@ -770,7 +824,10 @@ static SDL_Surface *FB_SetVideoMode(_THIS, SDL_Surface *current,
 		print_vinfo(&vinfo);
 #endif
 		if ( ioctl(console_fd, FBIOPUT_VSCREENINFO, &vinfo) < 0 ) {
-			vinfo.yres_virtual = height;
+			if (gfx_rotate)
+			    vinfo.yres_virtual = width;
+			else
+			    vinfo.yres_virtual = height;
 			if ( ioctl(console_fd, FBIOPUT_VSCREENINFO, &vinfo) < 0 ) {
 				SDL_SetError("Couldn't set console screen info");
 				return(NULL);
@@ -827,29 +884,38 @@ static SDL_Surface *FB_SetVideoMode(_THIS, SDL_Surface *current,
 
 	/* Set up the new mode framebuffer */
 	current->flags = (SDL_FULLSCREEN|SDL_HWSURFACE);
-	current->w = vinfo.xres;
-	current->h = vinfo.yres;
-	current->pitch = finfo.line_length;
-	current->pixels = mapped_mem+mapped_offset;
 
-	/* Set up the information for hardware surfaces */
-	surfaces_mem = (char *)current->pixels +
+	if (gfx_rotate) {
+	    current->w = vinfo.yres;
+	    current->h = vinfo.xres;
+	    current->pitch = current->w * 2;
+	    current->pixels = (short *) malloc(current->w * current->h * 2);
+	    gfx_pitch = finfo.line_length >> 1;
+	    gfx_buffer = (unsigned short *)(mapped_mem+mapped_offset);
+	} else {
+	    current->w = vinfo.xres;
+	    current->h = vinfo.yres;
+	    current->pitch = finfo.line_length;
+	    current->pixels = mapped_mem+mapped_offset;
+
+	    /* Set up the information for hardware surfaces */
+	    surfaces_mem = (char *)current->pixels +
 	                        vinfo.yres_virtual*current->pitch;
-	surfaces_len = (mapped_memlen-(surfaces_mem-mapped_mem));
-	FB_FreeHWSurfaces(this);
-	FB_InitHWSurfaces(this, current, surfaces_mem, surfaces_len);
+	    surfaces_len = (mapped_memlen-(surfaces_mem-mapped_mem));
+	    FB_FreeHWSurfaces(this);
+	    FB_InitHWSurfaces(this, current, surfaces_mem, surfaces_len);
 
-	/* Let the application know we have a hardware palette */
-	switch (finfo.visual) {
-	    case FB_VISUAL_PSEUDOCOLOR:
-		current->flags |= SDL_HWPALETTE;
-		break;
-	    default:
-		break;
-	}
+	    /* Let the application know we have a hardware palette */
+	    switch (finfo.visual) {
+		case FB_VISUAL_PSEUDOCOLOR:
+		    current->flags |= SDL_HWPALETTE;
+		    break;
+		default:
+		    break;
+	    }
 
-	/* Update for double-buffering, if we can */
-	if ( flags & SDL_DOUBLEBUF ) {
+	    /* Update for double-buffering, if we can */
+	    if ( flags & SDL_DOUBLEBUF ) {
 		if ( vinfo.yres_virtual == (height*2) ) {
 			current->flags |= SDL_DOUBLEBUF;
 			flip_page = 0;
@@ -860,11 +926,12 @@ static SDL_Surface *FB_SetVideoMode(_THIS, SDL_Surface *current,
 			FB_FlipHWSurface(this, current);
 			this->screen = NULL;
 		}
+	    }	
 	}
 
 	/* Set the update rectangle function */
 	this->UpdateRects = FB_DirectUpdate;
-
+	
 	/* We're done */
 	return(current);
 }
@@ -1067,6 +1134,9 @@ static void FB_FreeHWSurface(_THIS, SDL_Surface *surface)
 }
 static int FB_LockHWSurface(_THIS, SDL_Surface *surface)
 {
+	if (gfx_rotate)
+	    return 0;
+
 	if ( surface == this->screen ) {
 		SDL_mutexP(hw_lock);
 		if ( FB_IsSurfaceBusy(surface) ) {
@@ -1081,6 +1151,9 @@ static int FB_LockHWSurface(_THIS, SDL_Surface *surface)
 }
 static void FB_UnlockHWSurface(_THIS, SDL_Surface *surface)
 {
+	if (gfx_rotate)
+	    return;
+
 	if ( surface == this->screen ) {
 		SDL_mutexV(hw_lock);
 	}
@@ -1099,8 +1172,81 @@ static void FB_WaitIdle(_THIS)
 	return;
 }
 
+void FB_CopyRotate16_270(unsigned short *fb, unsigned short *sha_fb, int w, int h, int fb_stride, int sha_stride);
+/*
+static void FB_CopyRotate16_270(unsigned short *fb, unsigned short *sha_fb, int w, int h, int fb_stride, int sha_stride)
+{
+	unsigned short *ptr;
+	int is, im, ie, i, sha_pitch;
+
+	sha_pitch = sha_stride - w;
+
+	is = (int) sha_fb & 3;
+	if (is) w--;
+	im = w >> 1;
+	ie = w & 1;
+    	while (h--) {
+	    ptr = fb;
+	    if (h > 1) ptr--;
+	    if (is) {
+		if (h > 1) {			
+		//	*(unsigned int *)ptr = sha_fb[sha_stride] | (sha_fb[0] << 16);
+		    *ptr = sha_fb[sha_stride];
+		    *(ptr+1) = sha_fb[0];
+		} else {
+		    *ptr = sha_fb[0];
+		}
+		sha_fb++;
+		ptr += fb_stride;
+	    }
+	    i = im;
+	    while (i--) {
+		unsigned int dbl_pix = *(unsigned int *)sha_fb;
+		if (h > 1) {
+		    unsigned int dbl_pix2 = *(unsigned int *)((unsigned short *)sha_fb + sha_stride);
+		    //*(unsigned int *)ptr = (dbl_pix2 & 0xffff) | (dbl_pix << 16);
+		    *ptr = dbl_pix2 & 0xffff;
+		    *(ptr+1) = dbl_pix & 0xffff;
+		    ptr += fb_stride;
+		    //*(unsigned int *)ptr = (dbl_pix2 >> 16) | (dbl_pix & ~0xffff);
+		    *ptr = dbl_pix2 >> 16;
+		    *(ptr+1) = dbl_pix >> 16;
+		} else {
+		    *ptr = dbl_pix & 0xffff;
+		    ptr += fb_stride;
+		    *ptr = dbl_pix >> 16;
+		}
+		ptr += fb_stride;
+		sha_fb+=2;
+	    }
+	    if (ie) {
+		if (h > 1) {
+		//	*(unsigned int *)ptr = sha_fb[sha_stride] | (*sha_fb << 16);
+		    *ptr = sha_fb[sha_stride];
+		    *(ptr+1) = *sha_fb;
+		} else {
+		    *ptr = *sha_fb;
+		}
+		sha_fb++;
+	    }
+	    if (h > 1) {
+		h--;
+		fb--;
+		sha_fb += sha_stride;
+	    }
+	    fb--;
+	    sha_fb += sha_pitch;
+	}
+}
+ */
+
 static int FB_FlipHWSurface(_THIS, SDL_Surface *surface)
 {
+	if (gfx_rotate) {
+	     SDL_UpdateRect(this->screen, 0, 0, 0, 0);
+	     return 0;
+	}
+
 	/* Wait for vertical retrace and then flip display */
 	cache_vinfo.yoffset = flip_page*surface->h;
 	if ( FB_IsSurfaceBusy(this->screen) ) {
@@ -1119,7 +1265,25 @@ static int FB_FlipHWSurface(_THIS, SDL_Surface *surface)
 
 static void FB_DirectUpdate(_THIS, int numrects, SDL_Rect *rects)
 {
-	/* The application is already updating the visible video memory */
+	if (gfx_rotate) {
+	    SDL_Surface *screen;
+	    int		src_pitch;
+	    int		dst_pitch;
+
+	    screen = this->screen;
+	    src_pitch = screen->pitch >> 1;
+	    dst_pitch = gfx_pitch;
+
+	    while(numrects--) {
+		unsigned short *sha_fb = (unsigned short *)screen->pixels + rects->y * src_pitch + rects->x;
+		unsigned short *fb = gfx_buffer + rects->x * gfx_pitch + (gfx_pitch - rects->y - 1);
+
+		FB_CopyRotate16_270(fb, sha_fb, rects->w, rects->h, gfx_pitch, src_pitch);
+		
+		rects++;
+	    }
+	}
+
 	return;
 }
 
@@ -1455,8 +1619,10 @@ static void FB_VideoQuit(_THIS)
 		}
 	}
 
-	/* Clean up the memory bucket list */
-	FB_FreeHWSurfaces(this);
+	if (gfx_rotate == 0) {
+	    /* Clean up the memory bucket list */
+	    FB_FreeHWSurfaces(this);
+	}
 
 	/* Close console and input file descriptors */
 	if ( console_fd > 0 ) {
diff --git a/src/video/fbcon/SDL_fbvideo.h b/src/video/fbcon/SDL_fbvideo.h
index 65b7379..93a6d3e 100644
--- a/src/video/fbcon/SDL_fbvideo.h
+++ b/src/video/fbcon/SDL_fbvideo.h
@@ -86,6 +86,8 @@ struct SDL_PrivateVideoData {
 
 	void (*wait_vbl)(_THIS);
 	void (*wait_idle)(_THIS);
+
+	int rotate;
 };
 /* Old variable names */
 #define console_fd		(this->hidden->console_fd)
