--- a/include/SDL_stdinc.h	2009-10-19 20:25:52.000000000 +1300
+++ b/include/SDL_stdinc.h	2010-10-03 13:36:26.000000000 +1300
@@ -270,6 +270,10 @@
 		: "memory" );					\
 } while(0)
 #endif
+#if defined(__arm__)
+extern DECLSPEC void arm_memset32(void *dst, int c, size_t len);
+#define SDL_memset4(dst, val, len) arm_memset32(dst, val, len)
+#endif
 #ifndef SDL_memset4
 #define SDL_memset4(dst, val, len)		\
 do {						\
--- a/configure	2009-10-18 06:35:13.000000000 +1300
+++ b/configure	2010-10-03 13:53:54.000000000 +1300
@@ -20286,6 +20286,7 @@
 
 # Standard C sources
 SOURCES="$SOURCES $srcdir/src/*.c"
+SOURCES="$SOURCES $srcdir/src/video/*.S"
 SOURCES="$SOURCES $srcdir/src/audio/*.c"
 SOURCES="$SOURCES $srcdir/src/cdrom/*.c"
 SOURCES="$SOURCES $srcdir/src/cpuinfo/*.c"
--- /dev/null	2009-10-18 06:35:13.000000000 +1300
+++ b/src/video/memset.arm.S	2010-10-03 13:53:54.000000000 +1300
@@ -0,0 +1,90 @@
+#ifdef __arm__
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* Changes:
+ * 2010-08-11 Steve McIntyre <steve.mcintyre@arm.com>
+ *    Added small changes to the two functions to make them work on the
+ *    specified number of 16- or 32-bit values rather than the original
+ *    code which was specified as a count of bytes. More verbose comments
+ *    to aid future maintenance.
+ */
+
+    .text
+    .align
+
+    .global arm_memset32
+    .type   arm_memset32, %function
+
+/*
+ * Optimized memset functions for ARM.
+ *
+ * void arm_memset32(uint32_t* dst, uint32_t value, int count);
+ *
+ */
+arm_memset32:
+        .fnstart
+        push        {lr}
+
+        /* Multiply count by 4 - go from the number of 32-bit words to
+         * the number of bytes desired. */
+        mov         r2, r2, lsl #2
+
+.Lwork_32:
+        /* Set up registers ready for writing them out. */
+        mov         ip, r1
+        mov         lr, r1
+
+        /* Try to align the destination to a cache line. Assume 32
+         * byte (8 word) cache lines, it's the common case. */
+        rsb         r3, r0, #0
+        ands        r3, r3, #0x1C
+        beq         .Laligned32
+        cmp         r3, r2
+        andhi       r3, r2, #0x1C
+        sub         r2, r2, r3
+
+        /* (Optionally) write any unaligned leading bytes.
+         * (0-28 bytes, length in r3) */
+        movs        r3, r3, lsl #28
+        stmcsia     r0!, {r1, lr}
+        stmcsia     r0!, {r1, lr}
+        stmmiia     r0!, {r1, lr}
+        movs        r3, r3, lsl #2
+        strcs       r1, [r0], #4
+
+        /* Now quickly loop through the cache-aligned data. */
+.Laligned32:
+        mov         r3, r1
+1:      subs        r2, r2, #32
+        stmhsia     r0!, {r1,r3,ip,lr}
+        stmhsia     r0!, {r1,r3,ip,lr}
+        bhs         1b
+        add         r2, r2, #32
+
+        /* (Optionally) store any remaining trailing bytes.
+         * (0-30 bytes, length in r2) */
+        movs        r2, r2, lsl #28
+        stmcsia     r0!, {r1,r3,ip,lr}
+        stmmiia     r0!, {r1,lr}
+        movs        r2, r2, lsl #2
+        strcs       r1, [r0], #4
+        strmih      lr, [r0], #2
+
+        pop         {pc}
+        .fnend
+#endif
+
--- a/Makefile.dc	2010-10-04 11:17:35.000000000 +1300
+++ b/Makefile.dc	2010-10-04 11:17:49.000000000 +1300
@@ -70,8 +70,9 @@
 	src/video/SDL_video.c \
 	src/video/SDL_yuv.c \
 	src/video/SDL_yuv_sw.c \
+        src/video/memset.arm.S \
 
-OBJS = $(SRCS:.c=.o)
+OBJS = $(SRCS:.c=.o) $(SRCS:.S=.o)
 
 TEST = \
 	test/checkkeys.c \
