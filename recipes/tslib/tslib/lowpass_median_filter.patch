commit 1a03211abb6f73baa11c0538f5903c2023ce6641
Author: Marko Katic <dromede.gmail.com>
Date:   Mon Jun 4 17:41:41 2012 +0200

    Add two more filters, median and lowpass.

diff --git a/configure.ac b/configure.ac
index c42be91..8bf9ea0 100644
--- a/configure.ac
+++ b/configure.ac
@@ -55,6 +55,8 @@ TSLIB_CHECK_MODULE([dejitter], [yes], [Enable building of dejitter filter])
 TSLIB_CHECK_MODULE([linear-h2200], [yes], [Enable building of linearizing filter for iPAQ h2200])
 TSLIB_CHECK_MODULE([variance], [yes], [Enable building of variance filter])
 TSLIB_CHECK_MODULE([pthres], [yes], [Enable building of pthres filter])
+TSLIB_CHECK_MODULE([median], [yes], [Enable building of median filter])
+TSLIB_CHECK_MODULE([lowpass], [yes], [Enable building of lowpass filter])
 
 # hardware access modules
 TSLIB_CHECK_MODULE([ucb1x00], [yes], [Enable building of ucb1x00 raw module (UCB1x00 support)])
diff --git a/etc/ts.conf b/etc/ts.conf
index dc5c4de..af7d1ec 100644
--- a/etc/ts.conf
+++ b/etc/ts.conf
@@ -18,6 +18,9 @@
 
 # Uncomment if you're using an IBM Arctic II
 # module_raw arctic2
+#
+# If your panel is giving spiky signal applying median filter might help.
+# module median depth=5
 
 module pthres pmin=1
 module variance delta=30
diff --git a/plugins/Makefile.am b/plugins/Makefile.am
index a237e31..707a2cb 100644
--- a/plugins/Makefile.am
+++ b/plugins/Makefile.am
@@ -42,6 +42,18 @@ else
 PTHRES_MODULE =
 endif
 
+if ENABLE_MEDIAN_MODULE
+MEDIAN_MODULE = median.la
+else
+MEDIAN_MODULE =
+endif
+
+if ENABLE_LOWPASS_MODULE
+LOWPASS_MODULE = lowpass.la
+else
+LOWPASS_MODULE =
+endif
+
 if ENABLE_UCB1X00_MODULE
 UCB1X00_MODULE = ucb1x00.la
 else
@@ -119,6 +131,8 @@ pluginexec_LTLIBRARIES = \
 	$(DEJITTER_MODULE) \
 	$(VARIANCE_MODULE) \
 	$(PTHRES_MODULE) \
+	$(MEDIAN_MODULE) \
+	$(LOWPASS_MODULE) \
 	$(UCB1X00_MODULE) \
 	$(CORGI_MODULE) \
 	$(COLLIE_MODULE) \
@@ -148,6 +162,14 @@ pthres_la_SOURCES	= pthres.c
 pthres_la_LDFLAGS	= -module $(LTVSN)
 pthres_la_LIBADD	= $(top_builddir)/src/libts.la
 
+lowpass_la_SOURCES	= lowpass.c
+lowpass_la_LDFLAGS  = -module $(LTVSN)
+lowpass_la_LIBADD	= $(top_builddir)/src/libts.la
+
+median_la_SOURCES	= median.c
+median_la_LDFLAGS	= -module $(LTVSN)
+median_la_LIBADD	= $(top_builddir)/src/libts.la
+
 # hw access
 corgi_la_SOURCES	= corgi-raw.c
 corgi_la_LDFLAGS	= -module $(LTVSN)
diff --git a/plugins/lowpass.c b/plugins/lowpass.c
new file mode 100644
index 0000000..5af286e
--- /dev/null
+++ b/plugins/lowpass.c
@@ -0,0 +1,166 @@
+/*
+ * This file is placed under the LGPL.  Please see the file
+ * COPYING for more details.
+ * 
+ * Very stupid lowpass dejittering filter
+ */
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+
+#include "tslib.h"
+#include "tslib-filter.h"
+
+struct tslib_lowpass {
+	struct tslib_module_info module;
+        struct ts_sample last;
+        struct ts_sample ideal;
+	float factor;
+	unsigned int flags;
+	unsigned char threshold;
+#define VAR_PENUP		0x00000001
+};
+
+
+
+static int lowpass_read(struct tslib_module_info *info, struct ts_sample *samp, int nr)
+{
+	struct tslib_lowpass *var = (struct tslib_lowpass *)info;
+	struct ts_sample current;
+	int count = 0;
+	int delta;
+
+	while (count < nr) {
+		if (info->next->ops->read(info->next, &current, 1) < 1)
+			return count;
+
+		if (current.pressure == 0) {
+			var->flags |= VAR_PENUP;
+			samp [count++] = current;
+		} else if (var->flags & VAR_PENUP) {
+			var->flags &= ~VAR_PENUP;
+			var->last = current;
+			samp [count++] = current;
+		} else {
+			var->ideal = current;
+
+			var->ideal.x = var->last.x;
+			delta = current.x - var->last.x;
+			if (delta <= var->threshold && 
+					delta >= -var->threshold)
+				delta = 0;
+			delta *= var->factor;
+			var->ideal.x += delta;
+			
+			var->ideal.y = var->last.y;
+			delta = current.y - var->last.y;
+			if (delta <= var->threshold && 
+					delta >= -var->threshold)
+				delta = 0;
+			delta *= var->factor;
+			var->ideal.y += delta;
+
+			var->last = var->ideal;
+			samp [count++] = var->ideal;
+		}
+	}
+	return count;
+}
+
+static int lowpass_fini(struct tslib_module_info *info)
+{
+	free(info);
+        return 0;
+}
+
+static const struct tslib_ops lowpass_ops =
+{
+	.read	= lowpass_read,
+	.fini	= lowpass_fini,
+};
+
+static int lowpass_factor(struct tslib_module_info *inf, char *str, void *data)
+{
+	struct tslib_lowpass *var = (struct tslib_lowpass *)inf;
+	long double v;
+	int err = errno;
+
+	v = strtod(str, NULL);
+
+	if (v > 1 || v < 0)
+		return -1;
+
+	errno = err;
+	switch ((int)data) {
+	case 1:
+		var->factor = v;
+		break;
+
+	default:
+		return -1;
+	}
+	return 0;
+}
+
+static int lowpass_threshold(struct tslib_module_info *inf, char *str, 
+		void *data)
+{
+	struct tslib_lowpass *var = (struct tslib_lowpass *)inf;
+	long result;
+	int err = errno;
+
+	result = strtol(str,NULL,0);
+	if (errno == ERANGE)
+	       return -1;
+
+	errno = err;
+
+	switch ((int)data) {
+	case 1:
+		printf("threshold is now %d\n",result);
+		var->threshold = result;
+		break;
+	default:
+		return -1;
+	}
+	return 0;
+}
+
+
+static const struct tslib_vars lowpass_vars[] =
+{
+	{ "factor",	(void *)1, lowpass_factor },
+	{ "threshold",  (void*) 1, lowpass_threshold },
+};
+
+#define NR_VARS (sizeof(lowpass_vars) / sizeof(lowpass_vars[0]))
+
+TSAPI struct tslib_module_info *lowpass_mod_init(struct tsdev *dev, const char *params)
+{
+	struct tslib_lowpass *var;
+
+	var = malloc(sizeof(struct tslib_lowpass));
+	if (var == NULL)
+		return NULL;
+
+	memset(var, 0, sizeof *var);
+	var->module.ops = &lowpass_ops;
+
+	var->factor = 0.4;
+	var->threshold = 2;
+	var->flags = VAR_PENUP;
+
+	if (tslib_parse_vars(&var->module, lowpass_vars, NR_VARS, params)) {
+		free(var);
+		return NULL;
+	}
+
+
+	return &var->module;
+}
+
+#ifndef TSLIB_STATIC_LOWPASS_MODULE
+	TSLIB_MODULE_INIT(lowpass_mod_init);
+#endif
diff --git a/plugins/median.c b/plugins/median.c
new file mode 100644
index 0000000..83d3155
--- /dev/null
+++ b/plugins/median.c
@@ -0,0 +1,199 @@
+/*
+ *  tslib/plugins/median.c
+ *
+ *  Copyright (C) 2009 Marel ehf
+ *  Author Kári Davíðsson <karidav@marel.com>
+ *
+ * This file is placed under the LGPL.  Please see the file
+ * COPYING for more details.
+ *
+ * $Id:$
+ *
+ * Media filter incomming data
+ */
+#include "config.h"
+
+#include <errno.h>
+#include <stdio.h>
+#include <limits.h>
+#include <string.h>
+#include <stdlib.h>
+
+#include "tslib.h"
+#include "tslib-filter.h"
+
+#define PREPARESAMPLE( array, context, member ) { int count = context->size; while( count-- ) { array[count] = context->delay[count].member; } }
+
+struct median_context {
+	struct tslib_module_info module;
+    int size;
+    struct ts_sample * delay;
+    int withsamples;
+};
+
+static int comp_int(const void * n1, const void * n2)
+{
+    int * i1 = (int *) n1;
+    int * i2 = (int *) n2;
+
+    return  *i1 < *i2 ? -1 : 1;
+}
+
+static int comp_uint(const void * n1, const void * n2)
+{
+    unsigned int * i1 = (unsigned int *) n1;
+    unsigned int * i2 = (unsigned int *) n2;
+
+    return  *i1 < *i2 ? -1 : 1;
+}
+
+static void printsamples( char * prefix,  int * samples, size_t count )
+{
+#ifdef DEBUG
+    size_t j;
+
+    printf("%s Using %d samples ", prefix, count);
+    for( j = 0; j < count; j++)
+    {
+        printf(" %d", samples[j]);
+    }
+    printf("\n");
+#endif
+}
+
+static void printsample( char * prefix, struct ts_sample * s )
+{
+#ifdef DEBUG
+    printf( "%s using Point at (%d,%d) with pressure %u\n", prefix, s->x, s->y, s->pressure);
+#endif
+}
+
+static int median_read(struct tslib_module_info *inf, struct ts_sample *samp, int nr)
+{
+	struct median_context *c = (struct median_context *)inf;
+    int ret;
+
+	ret = inf->next->ops->read(inf->next, samp, nr);
+    if( ret > 0 ) {
+        int i;
+        struct ts_sample * s;
+
+		for (s = samp, i = 0; i < ret; i++, s++) {
+            int sorted[c->size];
+            unsigned int usorted[c->size];
+            unsigned int cpress;
+
+            cpress = s->pressure;
+
+            memmove( &c->delay[0], &c->delay[1], (c->size - 1) * sizeof( c->delay[0] ) );
+            c->delay[c->size -1] = *s;
+            
+            PREPARESAMPLE( sorted, c, x );
+            printsamples( "X Before", sorted, c->size );
+            qsort( &sorted[0], c->size, sizeof( sorted[0] ), comp_int);
+            s->x = sorted[c->size / 2];
+            printsamples( "X After", sorted, c->size );
+
+            PREPARESAMPLE( sorted, c, y );
+            printsamples( "Y Before", sorted, c->size );
+            qsort( &sorted[0], c->size, sizeof( sorted[0] ), comp_int);
+            s->y = sorted[c->size / 2];
+            printsamples( "Y After", sorted, c->size );
+
+            PREPARESAMPLE( usorted, c, pressure );
+            printsamples( "Pressure Before", usorted, c->size );
+            qsort( &usorted[0], c->size, sizeof( usorted[0] ), comp_uint);
+            s->pressure = usorted[ c->size / 2];
+            printsamples( "Pressure After", usorted, c->size );
+
+            printsample( "", s );
+
+            if( (cpress == 0)  && (c->withsamples != 0) )
+            { /* We have penup */
+                /* Flush the line we now must wait for c->size / 2 samples untill we get valid data again */
+                memset( c->delay, 0, sizeof( struct ts_sample) * c->size );
+                c->withsamples = 0;
+                printf("Pen Up\n");
+                s->pressure = cpress;
+            }
+            else if( (cpress != 0) && (c->withsamples == 0) )
+            { /* We have pen down */
+                c->withsamples = 1;
+                printf("Pen Down\n");
+            }
+        }
+    }
+
+	return ret;
+}
+
+static int median_fini(struct tslib_module_info *inf)
+{
+    struct median_context * c = ( struct median_context *) inf;
+
+    free( c->delay );
+	free(inf);
+
+	return 0;
+}
+
+static const struct tslib_ops __ts_input_ops = {
+	.read	= median_read,
+	.fini	= median_fini,
+};
+
+static int median_depth(struct tslib_module_info *inf, char *str, void *data __attribute__(( unused )) )
+{
+	struct median_context *m = (struct median_context *)inf;
+	unsigned long v;
+	int err = errno;
+
+	v = strtoul(str, NULL, 0);
+
+	if (v == ULONG_MAX && errno == ERANGE)
+		return -1;
+
+	errno = err;
+    m->delay = malloc( sizeof( struct ts_sample ) * v );
+    m->size = v;
+    
+	return 0;
+}
+
+static const struct tslib_vars raw_vars[] =
+{
+	{ "depth", (void *)1, median_depth },
+};
+
+#define NR_VARS (sizeof(raw_vars) / sizeof(raw_vars[0]))
+
+TSAPI struct tslib_module_info *median_mod_init(struct tsdev *dev __attribute__((unused)), const char *params)
+{
+	struct median_context *c;
+
+	c = malloc(sizeof(struct median_context));
+	if (c == NULL)
+		return NULL;
+    
+    memset( c, 0, sizeof( struct median_context ) );
+
+	c->module.ops = &__ts_input_ops;
+
+	if (tslib_parse_vars(&c->module, raw_vars, NR_VARS, params)) {
+		free(c);
+		return NULL;
+	}
+
+    if( c->delay == NULL )
+    {
+        c->delay = malloc( sizeof( struct ts_sample ) * 3 );
+        c->size = 3;
+        printf("Using default size of 3\n");
+    }
+
+	return &(c->module);
+}
+
+#ifndef TSLIB_STATIC_MEDIAN_MODULE
+	TSLIB_MODULE_INIT(median_mod_init);
+#endif
diff --git a/plugins/plugins.h b/plugins/plugins.h
index 873aba5..ed8edfa 100644
--- a/plugins/plugins.h
+++ b/plugins/plugins.h
@@ -5,6 +5,8 @@ TSLIB_DECLARE_MODULE(linear);
 TSLIB_DECLARE_MODULE(dejitter);
 TSLIB_DECLARE_MODULE(linear_h2200);
 TSLIB_DECLARE_MODULE(variance);
+TSLIB_DECLARE_MODULE(median);
+TSLIB_DECLARE_MODULE(lowpass);
 TSLIB_DECLARE_MODULE(pthres);
 
 TSLIB_DECLARE_MODULE(ucb1x00);
diff --git a/src/ts_load_module.c b/src/ts_load_module.c
index fd86876..626ea63 100644
--- a/src/ts_load_module.c
+++ b/src/ts_load_module.c
@@ -52,6 +52,12 @@ static const struct {
 #ifdef TSLIB_STATIC_LINEAR_MODULE 
 	{ "linear", linear_mod_init },
 #endif
+#ifdef TSLIB_STATIC_MEDIAN_MODULE
+	{ "median", median_mod_init}
+#endif
+#ifdef TSLIB_STATITC_LOWPASS_MODULE
+	{ "lowpass", lowpass_mod_init}
+#endif
 #ifdef TSLIB_STATIC_LINEAR_H2200_MODULE
 	{ "linear_h2200", linear_h2200_mod_init },
 #endif
